{"version":3,"sources":["BooksAPI.js","components/Book.js","containers/Home/Bookshelf.js","containers/Home/BooksContent.js","containers/Home/Home.js","containers/Search/Search.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Book","_ref","resetShelf","handleShelfChange","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee","e","options","value","wrap","_context","prev","next","target","selectedIndex","stop","this","_x","apply","arguments","react_default","createElement","className","style","width","height","backgroundImage","imageLinks","thumbnail","defaultValue","onChange","disabled","title","authors","map","author","index","key","Bookshelf","components_Book","BooksContent","Home_Bookshelf","filter","Home","history","useHistory","Home_BooksContent","onClick","push","Search","booksShelf","_useState","useState","_useState2","slicedToArray","searchResult","setSearchResult","handleInputChange","input","sent","length","forEach","type","placeholder","BooksApp","allBooks","setAllBooks","_useState3","_useState4","setBooksShelf","useEffect","BooksAPI","initialShelf","bookWithShelf","updateValue","updateBook","updatedBooks","defineProperty","toConsumableArray","react_router_dom","react_router","exact","path","Home_Home","Search_Search","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7b5626f2.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from \"react\";\n\nimport { update } from \"../BooksAPI\";\n\n/**\n * @description Display single book\n */\nfunction Book({ book, resetShelf }) {\n  /**\n   * @description Handle book's shelf change\n   * @param {object} e - event\n   */\n  const handleShelfChange = async (e) => {\n    const options = e.target.options;\n    const value = options[options.selectedIndex].value;\n\n    await update(book, value);\n\n    resetShelf(value, book);\n  };\n\n  return (\n    <div>\n      <div className=\"book\">\n        <div className=\"book-top\">\n          <div\n            className=\"book-cover\"\n            style={{\n              width: 128,\n              height: 193,\n              backgroundImage: book.imageLinks\n                ? `url(${book.imageLinks.thumbnail})`\n                : \"\",\n            }}\n          />\n          <div className=\"book-shelf-changer\">\n            <select\n              defaultValue={book.shelf || \"none\"}\n              onChange={handleShelfChange}\n            >\n              <option value=\"move\" disabled>\n                Move to...\n              </option>\n              <option value=\"currentlyReading\">Currently Reading</option>\n              <option value=\"wantToRead\">Want to Read</option>\n              <option value=\"read\">Read</option>\n              <option value=\"none\">None</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"book-title\">{book.title}</div>\n        {book.authors &&\n          book.authors.map((author, index) => (\n            <div className=\"book-authors\" key={index}>\n              {author}\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Book;\n","import React from \"react\";\n\nimport Book from \"../../components/Book\";\n\n/**\n * @description Map books which has same shelf on the shelf\n */\nfunction Bookshelf({ title, books, resetShelf }) {\n  return (\n    <div>\n      <div className=\"bookshelf\">\n        <h2 className=\"bookshelf-title\">{title}</h2>\n        <div className=\"bookshelf-books\">\n          <ol className=\"books-grid\">\n            {books.map((book) => (\n              <li key={book.id}>\n                <Book book={book} resetShelf={resetShelf} />\n              </li>\n            ))}\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Bookshelf;\n","import React from \"react\";\n\nimport Bookshelf from \"./Bookshelf\";\n\n/**\n * @description Assign books to different shelves\n */\nfunction BooksContent({ books, resetShelf }) {\n  return (\n    <div className=\"list-books-content\">\n      <Bookshelf\n        title=\"Currently Reading\"\n        books={books.filter((book) => book.shelf === \"currentlyReading\")}\n        resetShelf={resetShelf}\n      />\n      <Bookshelf\n        title=\"Want to Read\"\n        books={books.filter((book) => book.shelf === \"wantToRead\")}\n        resetShelf={resetShelf}\n      />\n      <Bookshelf\n        title=\"Read\"\n        books={books.filter((book) => book.shelf === \"read\")}\n        resetShelf={resetShelf}\n      />\n    </div>\n  );\n}\n\nexport default BooksContent;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport BookContent from \"./BooksContent\";\n\n/**\n * @description Display content of home page\n */\nfunction Home({ books, resetShelf }) {\n  const history = useHistory();\n  /**\n   * @description Go to search page\n   */\n  const handleClickSearch = () => history.push(\"/search\");\n\n  return (\n    <div className=\"list-books\">\n      <div className=\"list-books-title\">\n        <h1>MyReads</h1>\n      </div>\n      <BookContent books={books} resetShelf={resetShelf} />\n      <div className=\"open-search\">\n        <button onClick={handleClickSearch}>Add a book</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Book from \"../../components/Book\";\nimport { search } from \"../../BooksAPI\";\n\n/**\n * @description Search page\n */\nfunction Search({ resetShelf, booksShelf }) {\n  const [searchResult, setSearchResult] = useState([]);\n\n  const history = useHistory();\n  /**\n   * @description Go to home page\n   */\n  const handleClickHome = () => history.push(\"/\");\n\n  /**\n   * @description Handle search box input change\n   * @param {object} e - event\n   */\n  const handleInputChange = async (e) => {\n    const input = e.target.value;\n\n    if (input) {\n      const books = await search(input);\n\n      if (books.length > 0) {\n        books.forEach((book) => {\n          if (booksShelf[book.id]) book.shelf = booksShelf[book.id];\n        });\n\n        setSearchResult(books);\n      } else {\n        setSearchResult([]);\n      }\n    } else {\n      setSearchResult([]);\n    }\n  };\n\n  return (\n    <div className=\"search-books\">\n      <div className=\"search-books-bar\">\n        <button className=\"close-search\" onClick={handleClickHome}>\n          Close\n        </button>\n        <div className=\"search-books-input-wrapper\">\n          {/*\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\n                  You can find these search terms here:\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n                  you don't find a specific author or title. Every search is limited by search terms.\n                */}\n          <input\n            type=\"text\"\n            placeholder=\"Search by title or author\"\n            onChange={(e) => handleInputChange(e)}\n          />\n        </div>\n      </div>\n      <div className=\"search-books-results\">\n        <ol className=\"books-grid\">\n          {searchResult.length > 0 &&\n            searchResult.map((book) => (\n              <li key={book.id}>\n                <Book book={book} resetShelf={resetShelf} />\n              </li>\n            ))}\n        </ol>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport * as BooksAPI from \"./BooksAPI\";\nimport \"./App.css\";\n\nimport Home from \"./containers/Home/Home\";\nimport Search from \"./containers/Search/Search\";\n\nfunction BooksApp() {\n  const [allBooks, setAllBooks] = useState([]);\n  const [booksShelf, setBooksShelf] = useState({});\n\n  /**\n   * @description Get all books on the shelf\n   */\n  useEffect(async () => {\n    const books = await BooksAPI.getAll();\n\n    setAllBooks(books);\n    initialShelf(books);\n  }, []);\n\n  /**\n   * @description Initial shelf\n   * @param {array} books - All books on the shelf\n   */\n  const initialShelf = (books) => {\n    const bookWithShelf = {};\n\n    books.forEach((book) => {\n      bookWithShelf[book.id] = book.shelf;\n    });\n\n    setBooksShelf(bookWithShelf);\n  };\n\n  /**\n   * @description Set book to shelf\n   * @param {string} updateValue - The new shelf where the book will be located\n   * @param {object} updateBook - The book whose shelf will be updated\n   */\n  const resetShelf = (updateValue, updateBook) => {\n    let updatedBooks;\n\n    if (updateValue === \"none\" && booksShelf[updateBook.id]) {\n      updatedBooks = allBooks.filter((book) => book.id !== updateBook.id);\n      setAllBooks(updatedBooks);\n      setBooksShelf({ ...booksShelf, [updateBook.id]: \"\" });\n      return;\n    } else if (!booksShelf[updateBook.id]) {\n      updateBook.shelf = updateValue;\n      updatedBooks = [...allBooks, updateBook];\n    } else {\n      updatedBooks = allBooks.map((book) =>\n        book.id === updateBook.id\n          ? {\n              ...book,\n              shelf: updateValue,\n            }\n          : book\n      );\n    }\n\n    setAllBooks(updatedBooks);\n    setBooksShelf({\n      ...booksShelf,\n      [updateBook.id]: updateValue,\n    });\n  };\n\n  return (\n    <Router>\n      <div className=\"app\">\n        <Switch>\n          <Route exact path=\"/\">\n            {allBooks.length > 0 && (\n              <Home exact books={allBooks} resetShelf={resetShelf} />\n            )}\n          </Route>\n          <Route exact path=\"/search\">\n            <Search resetShelf={resetShelf} booksShelf={booksShelf} />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default BooksApp;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}